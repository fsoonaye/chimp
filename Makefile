# Compiler and flags
CXX := clang++
CXXFLAGS := -std=c++20 -Wall -Wextra -O3
LDFLAGS :=

# OS and architecture detection
UNAME_S := $(shell uname -s)
UNAME_M := $(shell uname -m)

ifeq ($(OS),Windows_NT)
	EXE := engine.exe
	RM := del /Q
	MKDIR := if not exist bin mkdir bin
else
	EXE := engine
	RM := rm -rf
	MKDIR := mkdir -p bin
endif

# Architecture-specific flags
ifeq ($(UNAME_M),arm64)     # macOS on Apple Silicon
	CXXFLAGS += -mcpu=native
else ifeq ($(UNAME_M),aarch64)  # Linux on ARM
	CXXFLAGS += -march=armv8-a
else ifeq ($(UNAME_M),x86_64)   # Intel/AMD
	CXXFLAGS += -march=native
endif

# Directories
SRC_DIR := src
OBJ_DIR := bin
DEP_DIR := bin

# File lists
SRC := $(wildcard $(SRC_DIR)/*.cpp)
HEADERS := $(wildcard $(SRC_DIR)/*.h) $(wildcard $(SRC_DIR)/*.hpp)
OBJ := $(patsubst $(SRC_DIR)/%.cpp,$(OBJ_DIR)/%.o,$(SRC))
DEP := $(OBJ:.o=.d)

# Default target
all: $(EXE)

# Link
$(EXE): $(OBJ)
	$(CXX) $(OBJ) -o $@ $(LDFLAGS)

# Compile with dependency generation
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	$(MKDIR)
	$(CXX) $(CXXFLAGS) -MMD -MP -c $< -o $@

# Include dependency files (auto-regenerated by -MMD)
-include $(DEP)

# Clean target
clean:
	$(RM) $(OBJ_DIR)/* $(EXE)

.PHONY: all clean
